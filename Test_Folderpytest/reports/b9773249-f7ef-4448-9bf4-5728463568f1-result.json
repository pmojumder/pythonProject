{"name": "test_login[invalid_user-admin123]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=131.0.6778.86)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C95C2775+28773]\n\t(No symbol) [0x00007FF6C952AFB0]\n\t(No symbol) [0x00007FF6C93C552A]\n\t(No symbol) [0x00007FF6C9418C65]\n\t(No symbol) [0x00007FF6C941919C]\n\t(No symbol) [0x00007FF6C94623F7]\n\t(No symbol) [0x00007FF6C943EFDF]\n\t(No symbol) [0x00007FF6C945F1A4]\n\t(No symbol) [0x00007FF6C943ED43]\n\t(No symbol) [0x00007FF6C940A548]\n\t(No symbol) [0x00007FF6C940B6B1]\n\tGetHandleVerifier [0x00007FF6C98EF45D+3358029]\n\tGetHandleVerifier [0x00007FF6C990430D+3443709]\n\tGetHandleVerifier [0x00007FF6C98F83FD+3394797]\n\tGetHandleVerifier [0x00007FF6C968929B+842635]\n\t(No symbol) [0x00007FF6C953654F]\n\t(No symbol) [0x00007FF6C9531FA4]\n\t(No symbol) [0x00007FF6C953213D]\n\t(No symbol) [0x00007FF6C9521629]\n\tBaseThreadInitThunk [0x00007FFAD392259D+29]\n\tRtlUserThreadStart [0x00007FFAD468AF38+40]", "trace": "driver = None, username = 'invalid_user', password = 'admin123'\n\n    @pytest.mark.parametrize(\n        \"username, password\",\n        [\n    \n            (\"invalid_user\", \"admin123\")\n        ]\n    )\n    def test_login(driver, username, password):\n        # Locate and interact with username field\n        username_field = driver1.find_element(\"name\", \"username\")\n        username_field.send_keys(username)\n    \n        # Locate and interact with password field\n        password_field = driver1.find_element(\"name\", \"password\")\n        password_field.clear()\n        password_field.send_keys(password)\n    \n        # Click login button\n>       login_button = driver1.find_element(\"xpath\" \"//button[@type='submit']\")\n\ntest_screen.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000263C479D2E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid locator\\\\n  (Sessi...07FF6C9521629]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD392259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD468AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\nE         (Session info: chrome=131.0.6778.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C95C2775+28773]\nE       \t(No symbol) [0x00007FF6C952AFB0]\nE       \t(No symbol) [0x00007FF6C93C552A]\nE       \t(No symbol) [0x00007FF6C9418C65]\nE       \t(No symbol) [0x00007FF6C941919C]\nE       \t(No symbol) [0x00007FF6C94623F7]\nE       \t(No symbol) [0x00007FF6C943EFDF]\nE       \t(No symbol) [0x00007FF6C945F1A4]\nE       \t(No symbol) [0x00007FF6C943ED43]\nE       \t(No symbol) [0x00007FF6C940A548]\nE       \t(No symbol) [0x00007FF6C940B6B1]\nE       \tGetHandleVerifier [0x00007FF6C98EF45D+3358029]\nE       \tGetHandleVerifier [0x00007FF6C990430D+3443709]\nE       \tGetHandleVerifier [0x00007FF6C98F83FD+3394797]\nE       \tGetHandleVerifier [0x00007FF6C968929B+842635]\nE       \t(No symbol) [0x00007FF6C953654F]\nE       \t(No symbol) [0x00007FF6C9531FA4]\nE       \t(No symbol) [0x00007FF6C953213D]\nE       \t(No symbol) [0x00007FF6C9521629]\nE       \tBaseThreadInitThunk [0x00007FFAD392259D+29]\nE       \tRtlUserThreadStart [0x00007FFAD468AF38+40]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "parameters": [{"name": "username", "value": "'invalid_user'"}, {"name": "password", "value": "'admin123'"}], "start": 1732861384579, "stop": 1732861387676, "uuid": "dce3960e-4a3e-430e-adbd-3dc379326457", "historyId": "a33363d23713e6d620f7a4affe94f7b9", "testCaseId": "61c0115221c30c81eb29dfcc423235bd", "fullName": "test_screen#test_login", "labels": [{"name": "suite", "value": "test_screen"}, {"name": "host", "value": "LAPTOP-3RADJBSR"}, {"name": "thread", "value": "34060-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_screen"}]}